#!/usr/bin/env python3

import sys
import json
import os
import requests

OUTDIR = os.getenv('OUTDIR', '../htmlreader_output')
BOOK_URL = os.getenv('BOOK_URL',
                     'https://doi.org/10.11647/')
HTMLREADER_URL = os.getenv('HTMLREADER_URL',
                           'https://books.openbookpublishers.com/10.11647/')
MATHJAX = os.getenv('MATHJAX', 'False')

def get_title(doi):
    url = 'https://api.thoth.pub/graphql'
    query = {"query": "{ workByDoi (doi: \"https://doi.org/10.11647/%s\") \
                                       { fullTitle } }" % doi}

    # handle connection issues
    try:
        r = requests.post(url, json=query)
        r.raise_for_status()
    except requests.exceptions.HTTPError as err:
        raise SystemExit(err)

    # handle bad responses
    try:
        json_data = json.loads(r.text)
        title = json_data["data"]["workByDoi"]["fullTitle"]
    except TypeError as err:
        print('The graphql query did not produce a valid response.',
              'It is possible that a bad DOI was supplied.')
        raise SystemExit(err)

    # return title stripped of what follows the column
    return(title.split(':')[0])

def run():
    _, metadata_path, epub_path = sys.argv
    with open(metadata_path) as f:
        metadata = json.load(f)

    epublius_dir = os.getcwd()

    exe = "./main.py"
    args = [exe,
            "-b", BOOK_URL + str(metadata['doi']),
            "-f", epub_path,
            "-o", OUTDIR,
            "-n", get_title(metadata['doi']),
            "-e", os.path.join(epublius_dir, ""),
            "-u", HTMLREADER_URL + metadata['doi'] + '/',
            "-t", os.path.join(epublius_dir, ""),
            "-d", metadata['doi'],
            "-m", MATHJAX]

    os.execvp(sys.executable, [exe] + args)


if __name__ == '__main__':
    run()
